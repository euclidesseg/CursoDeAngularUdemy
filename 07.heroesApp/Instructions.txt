
==== Rutas hijas y LazyLoading =====
---- Lo que haremos esta seccion sera, entre otras aprender el concepto de layouts
---- para especificar las rutas y contenido de las rutas ejemplo un login es totalmente e independiente 
---- al  componente de dashboard

---- En el layout vamos a especificar en alguna parte el router-outlet

===== Creacion de componentes =====
---- vamos a crear una carpeta que se llamara auth en donde tendremos todo lo relacionado con la autenticacion
---- otro que se llamara heroes y uno que se llame maeterial
---- el material solo sera un modulo para exportar ciertos modulos de angulas material

---- dentro de auth creamos una que se llame pages y dentro de pages un componente 
---- llamado layout page que sera la pagina en la cual se van a recepcionar todas las peticiones 
---- relacionadas con la autenticacion



===== Rutas hijas y LazyLoad =======
---- Luego de crear todos los archivos ya estamos listos para ver las rutas y enlazarlas
---- pero para eso debemos configrar los routing module de cada modulo.

---- nosotros podemos tener un dashboard que tiene una apariencia
---- tambien tenemos un login con otra apariencia podemos tener la dificultad de implementar los 
---- estilos por rutas y eso es lo que haremos en esta seccion
---- continuamos configurando nuestro modulo auth y el modulo heroes

---- luego de configurar esos modulos vamos hasta nuestro routing module principal 
---- app routing module para configurar las rutas que le queremos dar a esos dos submodulos 
---- que serian como hijos de mi modulo principal

---- Ya luego de hacer lazyload desde mi modulo principal appRoutingModule hasta los submodulos
---- necesitamos acceder las demas rutas de los submodulos no solo a la ruta principal
---- y para eso requerimos indicarle a los submodulos que ellos tambien tendran rutas hijas

---- luego de configurar tosas las rutas de nuestro modulo HeroesModule devemos
---- especificar donde se van a pintar  las rutas hijas de nuestro modulo para eso 
---- tengamos en cuenta que si tenemos varios routingModule en nuestro componente podemos usar varios
---- <router-outlet></router-outlet>

---- y de esta manera ya puedo usar toas las rutas de la siguiente manera
---- tengamos en cuanta que se accede a heroes desde nuestro appouting y de ahi a las rutas 
---- hijas de heroes las cuales se pintaran en el <router-outlet></router-outlet> del modulo

---- http://localhost:4200/heroes/new-hero
---- http://localhost:4200/heroes/search
---- http://localhost:4200/heroes/edit/6465464646 = donde el 6465464646 es un i y parametro de ruta
---- http://localhost:4200/heroes/49649
---- http://localhost:4200/heroes/list = ruta por defecto si se agrega una ruta desconocida

---- Luego de crear las rutas hijas para nuestro heroesModule hacemos lo mismo 
---- para nuestro modulo de de authModule y de esta manera todas nuestras rutas quedarian listas


============ Angular Material ==========
---- Esta parte de angular material es parte de una nueva seccion, en la cual aprenderemos a usar
---- angular material en nuestros componentes
---- tambien aprenderemos primeflex
---- ng add @angular/material   instalacion de angular material

---- para instalar primeFlex unicamente nos traemos el CDN o el link de la libreria hasta nuestro
---- index.html

===== creacion de login  ======
---- Para crear el login importamos nuestro modulo de Material hasta nuestro modulo auth
---- mat-form-field // todo componente que inicia con mat- indica que biene de angular material

=========== Material Sidenav Toolbar e icons ===========
---- Para crear sidenav vamos hasta el respectivo modulo y de ahi al layout donde se 
---- encontraran las instrucciones

======== Heroes Backend-json-server =========
---- json server es un servidor para pruebas que nos permite hacer muchas
---- cosas relacionado a backend como paginacion entpoints ordenar etc
---- instalamos json server ======= npm install --save-dev json-server
---- hemos agregado dev para indicar que sera una dependencia solo para desarroll y cuando hagamos el build
---- no se cargara a produccion

---- en el package.json creamos un nuevo script
---- "backend": "json-server --watch data/db.json",

---- seguido vamos hasta el path de nuestra carpeta y corremos el siguiente comando
---- npm run backend
---- esto creara dos rutas 
---- http://localhost:3000/users
---- http://localhost:3000/heroes
---- me crea dos rutas porque en el db.json encontro dos dos arreglos en todo ese json 

---- en potsman provamos esas dos rutas y ya podemos consultar todo y por id
---- esto tiene toda la estructura de un rest full tradicional

======= Variables de Enotornos =========
---- Una variable de entorno es el valor de una variable que varia dependiendo si estoy en produccion 
---- si estoy en desarrollo, testing preproduccion por eso se llaman variable de entorno
---- porque varian dependiendo el entorno 
---- la variable que vamos a crear es localhost ya que esta ruta va a cambiar estando en produccion
---- si estamos en desarrollo si sera localhost pero en produccion no va a ser localhost
---- creamos la carpeta environment y dentro environment.ts, environment.prod.ts

---- y de esta manera tenemos una ruta para produccion y una para desarrollo
---- pero tengo que decirle a angular aque utilice uno en funcion de si estoy desarrollando o si estoy
---- en produccion para hacer eso vamos a angular.json
---- buscamos el json de produccion y dentro de ese agregamos un nuevo json
----  "fileReplacements": [
                {
                  "replace":"src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
        ]

---- debido a que agregamos esto en el json production  lo que hace angular es que cuando se hace 
---- buil me reemplaza el primer archivo "src/environments/environment.ts", 
---- con "src/environments/environment.prod.ts" 